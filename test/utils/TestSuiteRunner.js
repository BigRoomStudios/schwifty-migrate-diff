'use strict';

const Path = require('path');
const Fs = require('fs');
const SchwiftyMigration = require('../../lib');

module.exports = class TestRunner {

    constructor(testType, session, testUtils) {

        this.testType = testType;
        this.session = session;
        this.testUtils = testUtils;

        this.testSuitePath = Path.join(__dirname, '../migration-tests', testType);
        this.testsInSuite = Fs.readdirSync(this.testSuitePath).filter((maybeDir) => {

            const stats = Fs.statSync(Path.join(this.testSuitePath, maybeDir));
            return stats.isDirectory();
        });
    }

    genTests(stepsToGen) {

        const stepsToFilterFor = [].concat(stepsToGen).filter((item) => item);

        const { expect, lab: { describe, it }, utils } = this.testUtils;

        let filteredTests = this.testsInSuite;

        if (stepsToFilterFor.length > 0) {
            filteredTests = this.testsInSuite.filter((testName) => {

                return stepsToFilterFor.find((filterSearch) => {

                    return testName.indexOf(filterSearch) !== -1;
                });
            });

            console.log('Tests filtered to run:', filteredTests);
        };

        describe(`"${this.session.options.knexConfig.client} ${this.testType}" tests:`, () => {

            filteredTests.forEach((testName) => {

                const testPath = Path.join(this.testSuitePath, testName);
                const testModels = this.getModels(Path.join(testPath, 'models'));
                const itText = require(Path.join(testPath, 'it'));
                const parentMigrationsDir = Path.join(testPath, 'migrations');
                const migrationsDir = Path.join(parentMigrationsDir, this.session.options.knexConfig.client);

                if (!Fs.existsSync(parentMigrationsDir)) {
                    Fs.mkdirSync(parentMigrationsDir);
                }

                if (!Fs.existsSync(migrationsDir)) {
                    Fs.mkdirSync(migrationsDir);
                }

                const expectedMigrationPath = Path.join(testPath, 'expected-migration.js');

                it(itText, (done) => {

                    // empty migrationsDir folder (cleanup)

                    Fs.readdirSync(migrationsDir)
                    .forEach((migrationFile) => {

                        const filePath = Path.join(migrationsDir, migrationFile);
                        Fs.unlinkSync(filePath);
                    });

                    SchwiftyMigration.genMigrationFile({
                        models: testModels,
                        migrationsDir,
                        knex: this.session.knex,
                        mode: 'test',
                        migrationName: `it-${itText.split(' ').join('-')}`
                    }, (err) => {

                        expect(err).to.not.exist();

                        const actualMigrationContents = utils.getLatestMigration(migrationsDir);
                        const expectedMigrationContents = Fs.readFileSync(expectedMigrationPath).toString('utf8');

                        // There's some pesky indentation that gets generated by schwifty-migration,
                        // and my editor removes all trailing whitespace when I hit save

                        // TODO make sure this is ok

                        const actualMigrationContentsNoWhitespace = actualMigrationContents.replace(/ /g,'');
                        const expectedMigrationContentsNoWhitespace = expectedMigrationContents.replace(/ /g,'');

                        expect(actualMigrationContentsNoWhitespace).to.equal(expectedMigrationContentsNoWhitespace);

                        done();
                    });
                });
            });
        });
    }

    getModels(modelsPath) {

        return Fs.readdirSync(modelsPath)
        .map((modelFileName) => {

            return require(Path.join(modelsPath, modelFileName));
        })
        .map((model) => {

            return model.bindKnex(this.session.knex); // Bind to the session's knex
        });
    }
};
